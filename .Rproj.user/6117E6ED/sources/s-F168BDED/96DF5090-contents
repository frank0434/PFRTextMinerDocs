#' Create and authenticate a curl handle for interacting with iPlant.
#'
#' Obtains the username and password of the user then creates a curl handle
#' using the \strong{curl} R package.
#'
#' The handle options are set with the user's credentials and the correct
#' HTTP type to authenticate to iPlant - NTLM (8). An authenticated handle
#' is returned which can be used with other function in the
#' \strong{iplantAcquiR} package to acquire documents. The credentials stored
#' in the handle will not be visible, but will allow requests to be made to
#' iPlant.
#'
#' @importFrom curl new_handle
#' @importFrom curl handle_setopt
#'
#' @param user The username of the user. Ideally left blank.
#' @param password The password of the user. Ideally left blank.
#'
#' @return A curl handle
#' @export
#'
#' @seealso
#' \code{\link{iplant_user}}
#' \code{\link{iplant_password}}
#' \code{\link{check_handle}}
#' \code{\link{acquire_file}}
#' \code{\link{acquire_list}}
#'
#' @examples
#' h <- iplant_handle()
#'
iplant_handle <- function(user = NULL, password = NULL) {

  # Get the username by calling the iplant_user function.
  user <- iplant_user(user)

  # Get the user password by calling the iplant_password function.
  password <- iplant_password(password)

  # Create a new curl handle.
  handle <- curl::new_handle()

  # Set the options of the handle with the user authentication.
  curl::handle_setopt(
    handle = handle,
    httpauth = 8,
    userpwd = paste(user, password, sep = ":")
  )

  # Return the authenticated handle.
  return(handle)
}


#' Get the username of the user.
#'
#' Obtains the username of the user which can then be used to create a handle
#' or with other HTTP request functions that require authentication.
#'
#' The username is obtained using the \strong{whoami} which checks both the
#' environment variables like LOGNAME, USER, and USERNAME, and the Unix or
#' Windows ID commands until it obtains the username.
#'
#' @importFrom whoami username
#'
#' @param user The username of the user. Ideally left blank.
#'
#' @return The username
#' @export
#'
#' @seealso
#' \code{\link{iplant_password}}
#' \code{\link{iplant_handle}}
#'
#' @examples
#' user <- iplant_user()
#'
iplant_user <- function(user = NULL) {
  if (is.null(user)) {
    user <- whoami::username()
  }
  invisible(user)
}


#' Get the password of the user.
#'
#' Obtains the password of the user which can then be used to create a handle
#' or with other HTTP request functions that require authentication.
#'
#' The password is obtained using the \strong{getPass} package which provides
#' a user interface to input the password with masking (i.e., not displaying
#' the literal typed text as input).
#'
#' @importFrom getPass getPass
#'
#' @param password The password of the user. Ideally left blank.
#'
#' @return The password
#' @export
#'
#' @seealso
#' \code{\link{iplant_user}}
#' \code{\link{iplant_handle}}
#'
#' @examples
#' user <- iplant_password()
#'
iplant_password <- function(password = NULL) {
  password <- Sys.getenv("PASSWORD")
  if (is.null(password)) {
    password <- getPass::getPass(msg = "Password: ",
                                 noblank = TRUE,
                                 forcemask = TRUE)
  }
  invisible(password)
}


#' Check the handle for a successful response.
#'
#' Performs sanity checks for an iplant handle by confirming the handle
#' is authenticated using the user's credentials and the response has content.
#'
#' The function takes an iplant handle as input and fetches a response from
#' the iPlant authentication url. It then checks the response has a
#' successful status code (200) and that the content of the request is
#' nonzero.
#'
#' @importFrom curl curl_fetch_memory
#'
#' @param handle The authenticated iplant handle of the user.
#'
#' @return TRUE if the handle is authenticated, else FALSE.
#' @export
#'
#' @seealso
#' \code{\link{iplant_user}}
#' \code{\link{iplant_password}}
#' \code{\link{iplant_handle}}
#'
#' @examples
#' h <- iplant_handle()
#' check_handle(h)
#'
check_handle <- function(handle = NULL) {

  # Define the authentication url on iPlant.
  url = "https://iplant.plantandfood.co.nz/_layouts/15/Authenticate.aspx?Source=%2F"

  # Request a response from iPlant using the authentication handle.
  res <- curl::curl_fetch_memory(url = url, handle = handle)

  # Check the status code is OK.
  if(res$status_code != 200) return(FALSE)

  # Check the content of the response is nonzero.
  if(length(res$content) <= 0) return(FALSE)

  # If all ok, return TRUE.
  return(TRUE)
}
